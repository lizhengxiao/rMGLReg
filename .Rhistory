umin <- 20
m.norm <- MGL.mle.mixed(obs = y, U = U, U_ = U_, umin = umin, f = f,
copula = "Normal", method = "L-BFGS-B",
initpar = 0.2)
m.t <- MGL.mle.mixed(obs = y, U = U, U_ = U_, umin = umin, f = f,
copula = "t", method = "L-BFGS-B",
initpar = c(0.1,3))
m.gumbel <- MGL.mle.mixed(obs = y, U = U, U_ = U_, umin = umin, f = f,
copula = "Gumbel",  method = "L-BFGS-B",
initpar = c(2))
m.MGLMGA180 <- MGL.mle.mixed(obs = y, U = U, U_ = U_, umin = umin, f = f,
copula = "MGL180",  method = "L-BFGS-B",
initpar = c(2))
hcMGL.bivar
m.MGB2 <- MGL.mle.mixed(obs = y, U = U, U_ = U_, umin = umin, f = f,
copula = "MGB2",  method = "L-BFGS-B",
initpar = c(1, 4, 0.4))
m.MGLEV180 <- MGL.mle.mixed(obs = y, U = U, U_ = U_, umin = umin, f = f,
copula = "MGLEV180",  method = "L-BFGS-B",
initpar = c(0.2))
m.MGLEV180 <- MGL.mle.mixed(obs = y, U = U, U_ = U_, umin = umin, f = f,
copula = "MGL-EV180",  method = "L-BFGS-B",
initpar = c(0.2))
m.MGLEV180
library(rMGLReg)
library(rMGLReg)
library(fitdistrplus)
library(splines)
data("danishmulti")
dt <- data.table::data.table(danishmulti)
dt[, year := as.numeric(substr(Date, start = 1, stop = 4))]
dtnew <- dt[Building>0&Contents>0]
y1 <- dtnew$Building
y2 <- dtnew$Contents
XY <- cbind(y1, y2)
y <- cbind(y1, y2)
m1 <- sROC::kCDF(y[,1], bw = 0.2, xgrid = sort(y[,1]))
m2 <- sROC::kCDF(y[,2], bw = 0.2, xgrid = sort(y[,2]))
x <- cbind(m1$x, m2$x)
u1 <- m1$Fhat;y1 <- y[,1]
u1[order(y1)] <- m1$Fhat
u2 <- m2$Fhat; y2 <- y[,2]
u2[order(y2)] <- m2$Fhat
U <- cbind(u1, u2) # empirical cdf
Usample <- U
library(rMGLReg)
# devtools::load_all()
u <- cbind(earth_model$u1, earth_model$u2)
u_ <- cbind(earth_model$u1, earth_model$u2_)
y <- cbind(earth_model$y1, earth_model$y2)
f <- cbind(earth_model$f1, earth_model$f2)
obs <- y
U <- u
U_ <- u_
umin <- 20
m.norm <- MGL.mle.mixed(obs = y, U = U, U_ = U_, umin = umin, f = f,
copula = "Normal", method = "L-BFGS-B",
initpar = 0.2)
m.t <- MGL.mle.mixed(obs = y, U = U, U_ = U_, umin = umin, f = f,
copula = "t", method = "L-BFGS-B",
initpar = c(0.1,3))
m.gumbel <- MGL.mle.mixed(obs = y, U = U, U_ = U_, umin = umin, f = f,
copula = "Gumbel",  method = "L-BFGS-B",
initpar = c(2))
m.MGLMGA180 <- MGL.mle.mixed(obs = y, U = U, U_ = U_, umin = umin, f = f,
copula = "MGL180",  method = "L-BFGS-B",
initpar = c(2))
m.MGB2 <- MGL.mle.mixed(obs = y, U = U, U_ = U_, umin = umin, f = f,
copula = "MGB2",  method = "L-BFGS-B",
initpar = c(1, 4, 0.4))
m.MGLEV180 <- MGL.mle.mixed(obs = y, U = U, U_ = U_, umin = umin, f = f,
copula = "MGL-EV180",  method = "L-BFGS-B",
initpar = c(0.2))
recap <- function(x){
res <- c(alpha = x$estimates,
se = x$se,
loglike = x$loglike,
AIC = x$AIC, BIC = x$BIC)
if(length(res) < 6)
res <- c(res[1], NA, NA,res[2], NA, NA, res[3:5])
if (length(res) > 6 & length(res) < 9)
res <- c(res[1:2], NA, res[3:4], NA, res[5:7])
res <- as.matrix(res)
colnames(res) <- x$copula$name
res}
res.all <- round(cbind(recap(m.norm),
recap(m.t),
recap(m.gumbel),
recap(m.MGLMGA180),
recap(m.MGB2),
recap(m.MGLEV180)
), 4)
out.com <- t(res.all)
out.com <- out.com[order(out.com[,9], decreasing = T),]
knitr::kable(out.com, digits = 2)
recap <- function(x){
res <- c(alpha = x$estimates,
se = x$se,
loglike = x$loglike,
AIC = x$AIC, BIC = x$BIC)
if(length(res) < 6)
res <- c(res[1], NA, NA,res[2], NA, NA, res[3:5])
if (length(res) > 6 & length(res) < 9)
res <- c(res[1:2], NA, res[3:4], NA, res[5:7])
res <- as.matrix(res)
colnames(res) <- x$copula$name
res}
res.all <- round(cbind(recap(m.norm),
recap(m.t),
recap(m.gumbel),
recap(m.MGLMGA180),
recap(m.MGB2),
recap(m.MGLEV180)
), 4)
out.com <- t(res.all)
out.com <- out.com[order(out.com[,9], decreasing = T),]
knitr::kable(out.com, digits = 3)
renv::status()
install.packages("rmarkdown")
install.packages("roxygen2")
install.packages("pracma")
install.packages("fCopulae")
install.packages("devtools")
=======
#
# m.MGLMGA180 <- MGL.mle(U,
#                        copula  = "MGL180",
#                        initpar = c(0.5))
knitr::kable(out.com[order(out.com[,9]),], digits = 3)
out.com[order(out.com[,9]),]
out.com <- t(res.all)
out.com <- out.com[order(out.com[,9]),]
knitr::kable(out.com, digits = 3)
knitr::kable(out.com, digits = 2)
?order
out.com <- out.com[order(out.com[,9], decreasing = T)]
out.com
out.com <- out.com[order(out.com[,9], decreasing = T),]
out.com <- t(res.all)
out.com <- out.com[order(out.com[,9], decreasing = T),]
out.com
knitr::kable(out.com, digits = 2)
MGL.mle
MGL.mle
m.MGB2 <- MGL.mle(U,
copula  = "MGB2",
initpar = c(0.1, 2, 0.4))
m.MGLMGA180 <- MGL.mle(U,
copula  = "MGL180",
initpar = c(1))
m.MGB2 <- MGL.mle(U,
copula  = "MGB2",
initpar = c(0.1, 2, 0.4))
m.MGB2 <- MGL.mle(U,
copula  = "MGB2",
initpar = c(0.1, 2, 0.4))
m.MGLEV180 <- MGL.mle(U,
copula  = "MGL-EV180",
initpar = c(2))
m.MGLEV180 <- MGL.mle(U,
copula  = "MGL-EV180",
initpar = c(2))
m.norm <- MGL.mle(U = U,
copula  = "Normal",
initpar = 0.5)
devtools::document()
rm(list = c("MGL.mle"))
devtools::document()
library(rMGLReg)
? earthqCHI
ï¼ŸhcMGL.bivar
?hcMGL.bivar
usethis::use_vignette("counter-plot-MGLMGA")
library(rMGLReg)
devtools::load_all(".")
dMGLMGA
library(rMGLReg)
library(ggplot2)
library(latex2exp)
library(data.table)
# =======================================================================
# Case I:
# sigma <- c(0.5, 0.5)
# a <- 20
# b <- c(5, 5)
# =======================================================================
n.grid <- 500
sigma <- c(0.5, 0.5)
a <- 20
b <- c(5, 5)
xgrid <- ygrid <- seq(0.01, 20, length.out = n.grid)
grid <- expand.grid("u1" = xgrid, "u2" = ygrid)
mtrx3d <- matrix(0, nrow = nrow(grid), ncol = 3)
mtrx3d[,1] <- grid[,1]
mtrx3d[,2] <- grid[,2]
for(i in 1:nrow(mtrx3d)){
mtrx3d[i,3] = dMGLMGA(y1 = grid[i,1], y2 = grid[i,2],
sigma = sigma,
a = a, b = b)
}
head(mtrx3d)
mtrx3d <- data.table(u1 = mtrx3d[,1], u2 = mtrx3d[,2], cu1u2 = mtrx3d[,3])
bins <- 10
sigma1 <- sigma[1]; sigma2 <- sigma[2]
b1 <- b[1]; b2 <- b[2]
Nsim <- 1000
u1sim <- runif(Nsim, min = 0, max = 1)
y1sim <- qLMGA(u1sim, sigma = sigma1, a = a, b = b1)
library(rMGLReg)
library(ggplot2)
library(latex2exp)
library(data.table)
# =======================================================================
# Case I:
# sigma <- c(0.5, 0.5)
# a <- 20
# b <- c(5, 5)
# =======================================================================
n.grid <- 500
sigma <- c(0.5, 0.5)
a <- 20
b <- c(5, 5)
xgrid <- ygrid <- seq(0.01, 20, length.out = n.grid)
grid <- expand.grid("u1" = xgrid, "u2" = ygrid)
mtrx3d <- matrix(0, nrow = nrow(grid), ncol = 3)
mtrx3d[,1] <- grid[,1]
mtrx3d[,2] <- grid[,2]
for(i in 1:nrow(mtrx3d)){
mtrx3d[i,3] = dMGLMGA(y1 = grid[i,1], y2 = grid[i,2],
sigma = sigma,
a = a, b = b)
}
head(mtrx3d)
mtrx3d <- data.table(u1 = mtrx3d[,1], u2 = mtrx3d[,2], cu1u2 = mtrx3d[,3])
bins <- 10
sigma1 <- sigma[1]; sigma2 <- sigma[2]
b1 <- b[1]; b2 <- b[2]
Nsim <- 1000
u1sim <- runif(Nsim, min = 0, max = 1)
y1sim <- qGLMGA(u1sim, sigma = sigma1, a = a, b = b1)
anew <- a + 0.5; b2new <- b2*(1 + y1sim^(-1/sigma1)/(2*b1))
y2sim <- NA
for(i in 1:Nsim){
y2sim[i] <- rLMGA(1, sigma = sigma2, a = anew, b = b2new[i])
}
library(rMGLReg)
qGLMGA
library(rMGLReg)
library(ggplot2)
library(latex2exp)
library(data.table)
# =======================================================================
# Case I:
# sigma <- c(0.5, 0.5)
# a <- 20
# b <- c(5, 5)
# =======================================================================
n.grid <- 500
sigma <- c(0.5, 0.5)
a <- 20
b <- c(5, 5)
xgrid <- ygrid <- seq(0.01, 20, length.out = n.grid)
grid <- expand.grid("u1" = xgrid, "u2" = ygrid)
mtrx3d <- matrix(0, nrow = nrow(grid), ncol = 3)
mtrx3d[,1] <- grid[,1]
mtrx3d[,2] <- grid[,2]
for(i in 1:nrow(mtrx3d)){
mtrx3d[i,3] = dMGLMGA(y1 = grid[i,1], y2 = grid[i,2],
sigma = sigma,
a = a, b = b)
}
head(mtrx3d)
mtrx3d <- data.table(u1 = mtrx3d[,1], u2 = mtrx3d[,2], cu1u2 = mtrx3d[,3])
bins <- 10
sigma1 <- sigma[1]; sigma2 <- sigma[2]
b1 <- b[1]; b2 <- b[2]
Nsim <- 1000
u1sim <- runif(Nsim, min = 0, max = 1)
y1sim <- qGLMGA(u1sim, sigma = sigma1, a = a, b = b1)
anew <- a + 0.5; b2new <- b2*(1 + y1sim^(-1/sigma1)/(2*b1))
y2sim <- NA
for(i in 1:Nsim){
y2sim[i] <- rGLMGA(1, sigma = sigma2, a = anew, b = b2new[i])
}
rGLMGA
qGLMGA
?qGLMGA
library(rMGLReg)
qGLMGA
library(rMGLReg)
load.all()
devtools::load_all()
>>>>>>> Stashed changes
renv::restore()
renv::init()
renv::restore()
install.packages("matrixStats")
renv::restore()
install.packages("fitdistrplus")
install.packages("VineCopula")
install.packages("VineCopula")
install.packages("fitdistrplus")
install.packages("VineCopula")
install.packages("fitdistrplus")
library(rmarkdown)
renv::status()
install.packages("copula")
renv::status()
install.packages("devtools")
install.packages("evd")
install.packages("extRemes")
install.packages("gamlss")
install.packages("gamlss.tr")
install.packages("qpdf", lib="D:/Rpackages/rMGLReg/renv/library/R-4.1/x86_64-w64-mingw32")
install.packages("qqplotr", lib="D:/Rpackages/rMGLReg/renv/library/R-4.1/x86_64-w64-mingw32")
install.packages("usethis", lib="D:/Rpackages/rMGLReg/renv/library/R-4.1/x86_64-w64-mingw32")
renv::status()
install.packages("data.table")
install.packages("latex2exp", lib="D:/Rpackages/rMGLReg/renv/library/R-4.1/x86_64-w64-mingw32")
install.packages("patchwork")
install.packages("sROC", lib="D:/Rpackages/rMGLReg/renv/library/R-4.1/x86_64-w64-mingw32")
renv::status()
install.packages("sROC")
renv::snapshot()
library(rMGLReg)
??kCDF
install.packages("sROC")
snpar
install.packages("snpar")
snpar::kCDF(y[,1], bw = 0.2)
library(snpar)
snpar::kCDF(y[,1], bw = 0.2)
kCDF
snpar::kde(y[,1], kernel = "quar", plot = TRUE, h = 0.2)
library(rMGLReg)
library(fitdistrplus)
library(splines)
data("danishmulti")
dt <- data.table::data.table(danishmulti)
dt[, year := as.numeric(substr(Date, start = 1, stop = 4))]
dtnew <- dt[Building>0&Contents>0]
y1 <- dtnew$Building
y2 <- dtnew$Contents
XY <- cbind(y1, y2)
y <- cbind(y1, y2)
snpar::kde(y[,1], kernel = "quar", plot = TRUE, h = 0.2)
?kde
snpar::kde(y[,1], kernel = "gaus",
xgrid = y[,1],
h = 0.2)$Fhat
u2 <- snpar::kde(y[,2], kernel = "gaus",
xgrid = y[,2],
h = 0.2)$Fhat
# m1 <- sROC::kCDF(y[,1], bw = 0.2, xgrid = sort(y[,1]))
# m2 <- sROC::kCDF(y[,2], bw = 0.2, xgrid = sort(y[,2]))
# x <- cbind(m1$x, m2$x)
# u1 <- m1$Fhat;y1 <- y[,1]
# u1[order(y1)] <- m1$Fhat
# u2 <- m2$Fhat; y2 <- y[,2]
# u2[order(y2)] <- m2$Fhat
U <- cbind(u1, u2) # empirical cdf
u1
u1 <- snpar::kde(y[,1], kernel = "gaus",
xgrid = y[,1],
h = 0.2)$Fhat
u2 <- snpar::kde(y[,2], kernel = "gaus",
xgrid = y[,2],
h = 0.2)$Fhat
u1
u2
# m1 <- sROC::kCDF(y[,1], bw = 0.2, xgrid = sort(y[,1]))
# m2 <- sROC::kCDF(y[,2], bw = 0.2, xgrid = sort(y[,2]))
# x <- cbind(m1$x, m2$x)
# u1 <- m1$Fhat;y1 <- y[,1]
# u1[order(y1)] <- m1$Fhat
# u2 <- m2$Fhat; y2 <- y[,2]
# u2[order(y2)] <- m2$Fhat
U <- cbind(u1, u2) # empirical cdf
Usample <- U
plot(Usample)
m.norm <- MGL.mle(U = U,
copula  = "Normal",
initpar = 0.5)
m.t <- MGL.mle(U = U,
copula  = "t",
initpar = c(0.5, 4))
m.gumbel <- MGL.mle(U = U,
copula  = "Gumbel",
initpar = c(2))
m.MGLMGA180 <- MGL.mle(U,
copula  = "MGL180",
initpar = c(1))
m.MGB2 <- MGL.mle(U,
copula  = "MGB2",
initpar = c(0.1, 2, 0.4))
m.MGLEV180 <- MGL.mle(U,
copula  = "MGL-EV180",
initpar = c(2))
recap <- function(x){
res <- c(alpha = x$estimates,
se = x$se,
loglike = x$loglike,
AIC = x$AIC, BIC = x$BIC)
if(length(res) < 6)
res <- c(res[1], NA, NA,res[2], NA, NA, res[3:5])
if (length(res) > 6 & length(res) < 9)
res <- c(res[1:2], NA, res[3:4], NA, res[5:7])
res <- as.matrix(res)
colnames(res) <- x$copula$name
res}
res.all <- round(cbind(recap(m.norm),
recap(m.t),
recap(m.gumbel),
recap(m.MGLMGA180),
recap(m.MGB2),
recap(m.MGLEV180)
), 4)
out.com <- t(res.all)
out.com <- out.com[order(out.com[,9], decreasing = T),]
knitr::kable(out.com, digits = 2)
knitr::kable(out.com, digits = 3)
renv::snapshot()
usethis::use_package(package = "snpar", type = "Suggests")
hcMGLEV180.bivar
dcMGL.reg
dcMGLEV180.bivar
hcMGL.bivar
hcMGL.bivar
hcMGL.bivar
hcMGLEV180.bivar
library(rMGLReg)
# devtools::load_all()
u <- cbind(earth_model$u1, earth_model$u2)
u_ <- cbind(earth_model$u1, earth_model$u2_)
y <- cbind(earth_model$y1, earth_model$y2)
f <- cbind(earth_model$f1, earth_model$f2)
obs <- y
U <- u
U_ <- u_
umin <- 20
m.norm <- MGL.mle.mixed(obs = y, U = U, U_ = U_, umin = umin, f = f,
copula = "Normal", method = "L-BFGS-B",
initpar = 0.2)
m.t <- MGL.mle.mixed(obs = y, U = U, U_ = U_, umin = umin, f = f,
copula = "t", method = "L-BFGS-B",
initpar = c(0.1,3))
m.gumbel <- MGL.mle.mixed(obs = y, U = U, U_ = U_, umin = umin, f = f,
copula = "Gumbel",  method = "L-BFGS-B",
initpar = c(2))
m.MGLMGA180 <- MGL.mle.mixed(obs = y, U = U, U_ = U_, umin = umin, f = f,
copula = "MGL180",  method = "L-BFGS-B",
initpar = c(2))
m.MGB2 <- MGL.mle.mixed(obs = y, U = U, U_ = U_, umin = umin, f = f,
copula = "MGB2",  method = "L-BFGS-B",
initpar = c(1, 4, 0.4))
m.MGLEV180 <- MGL.mle.mixed(obs = y, U = U, U_ = U_, umin = umin, f = f,
copula = "MGL-EV180",  method = "L-BFGS-B",
initpar = c(0.2))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(rMGLReg)
# devtools::load_all()
u <- cbind(earth_model$u1, earth_model$u2)
u_ <- cbind(earth_model$u1, earth_model$u2_)
y <- cbind(earth_model$y1, earth_model$y2)
f <- cbind(earth_model$f1, earth_model$f2)
obs <- y
U <- u
U_ <- u_
umin <- 20
m.norm <- MGL.mle.mixed(obs = y, U = U, U_ = U_, umin = umin, f = f,
copula = "Normal", method = "L-BFGS-B",
initpar = 0.2)
m.t <- MGL.mle.mixed(obs = y, U = U, U_ = U_, umin = umin, f = f,
copula = "t", method = "L-BFGS-B",
initpar = c(0.1,3))
m.gumbel <- MGL.mle.mixed(obs = y, U = U, U_ = U_, umin = umin, f = f,
copula = "Gumbel",  method = "L-BFGS-B",
initpar = c(2))
m.MGLMGA180 <- MGL.mle.mixed(obs = y, U = U, U_ = U_, umin = umin, f = f,
copula = "MGL180",  method = "L-BFGS-B",
initpar = c(2))
m.MGB2 <- MGL.mle.mixed(obs = y, U = U, U_ = U_, umin = umin, f = f,
copula = "MGB2",  method = "L-BFGS-B",
initpar = c(1, 4, 0.4))
m.MGLEV180 <- MGL.mle.mixed(obs = y, U = U, U_ = U_, umin = umin, f = f,
copula = "MGL-EV180",  method = "L-BFGS-B",
initpar = c(0.2))
recap <- function(x){
res <- c(alpha = x$estimates,
se = x$se,
loglike = x$loglike,
AIC = x$AIC, BIC = x$BIC)
if(length(res) < 6)
res <- c(res[1], NA, NA,res[2], NA, NA, res[3:5])
if (length(res) > 6 & length(res) < 9)
res <- c(res[1:2], NA, res[3:4], NA, res[5:7])
res <- as.matrix(res)
colnames(res) <- x$copula$name
res}
res.all <- round(cbind(recap(m.norm),
recap(m.t),
recap(m.gumbel),
recap(m.MGLMGA180),
recap(m.MGB2),
recap(m.MGLEV180)
), 4)
out.com <- t(res.all)
out.com <- out.com[order(out.com[,9], decreasing = T),]
knitr::kable(out.com, digits = 3)
